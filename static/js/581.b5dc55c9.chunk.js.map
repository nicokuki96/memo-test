{"version":3,"file":"static/js/581.b5dc55c9.chunk.js","mappings":"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","sources":["components/Popup.jsx","components/Board.jsx"],"sourcesContent":["import React from \"react\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 400,\r\n  bgcolor: \"background.paper\",\r\n  border: \"2px solid #000\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nconst Popup = (props) => {\r\n  const { handleClose, open, allBoard, apiFetch } = props;\r\n\r\n  const resetGame = () => {\r\n    allBoard.forEach((element, index) => {\r\n      element.state = 0;\r\n    });\r\n    handleClose();\r\n    apiFetch();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        open={open}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box sx={style}>\r\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n            You win!\r\n          </Typography>\r\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n            <Button onClick={resetGame} variant=\"contained\">\r\n              Restart\r\n            </Button>\r\n          </Typography>\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Popup;\r\n","import { React, useState, useEffect } from \"react\";\r\nimport uuniq from \"uniqid\";\r\nimport arrayShuffle from \"array-shuffle\";\r\nimport Popup from \"./Popup\";\r\n\r\nconst Board = () => {\r\n  // const [squares1, setSquares1] = useState([\r\n  //   \"cyan\",\r\n  //   \"gold\",\r\n  //   \"pink\",\r\n  //   \"chili\",\r\n  //   \"black\",\r\n  //   \"blue\",\r\n  // ]);\r\n  const [allBoard, setAllBoard] = useState([]);\r\n  const [selected, setSelected] = useState();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    apiFetch();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const handleClose = () => setOpen(false);\r\n  const handleOpen = () => setOpen(true);\r\n\r\n  const randomNumberInRange = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  };\r\n\r\n  const apiFetch = async () => {\r\n    const random = randomNumberInRange(0, 100);\r\n    const request = await fetch(\r\n      `https://api.pexels.com/v1/curated?page=${random}}&per_page=6\r\n    `,\r\n      {\r\n        headers: {\r\n          Authorization:\r\n            \"HbBjqRDPA4Ea4zSvMndnaN8KOoyys3cZWbmcFelwrQha9cLqJa5zJggU\",\r\n        },\r\n      }\r\n    );\r\n    const data = await request.json();\r\n    const dataPics = data.photos;\r\n    const imageFromServer = [];\r\n    dataPics.forEach((item) => {\r\n      imageFromServer.push(item.src.tiny);\r\n    });\r\n    setRandomPosition(imageFromServer);\r\n  };\r\n\r\n  const setRandomPosition = (imageFromServer) => {\r\n    const random1 = arrayShuffle(imageFromServer);\r\n    const random2 = arrayShuffle(imageFromServer);\r\n    let board = random1.concat(random2);\r\n    board = board.map((item, i) => {\r\n      // states: 0 (close), 1 (opened but wrong), 2 (opened pair)\r\n      return {\r\n        id: uuniq(),\r\n        color: item,\r\n        state: 0,\r\n      };\r\n    });\r\n    setAllBoard(board);\r\n  };\r\n  const showColor = (item) => {\r\n    if (item.state === 0) {\r\n      // const find = allBoard.findIndex((i) => i.id === item.id);\r\n      const newBoard = allBoard.map((square) => {\r\n        if (square.id === item.id) {\r\n          const newSquare = {\r\n            ...item,\r\n            state: 1,\r\n          };\r\n          return newSquare;\r\n        }\r\n        return square;\r\n      });\r\n      // Block click when the array has 2 in state un 1\r\n      const twoSelected = newBoard.filter((x) => x.state === 1).length;\r\n      if (twoSelected < 3) {\r\n        setAllBoard(newBoard);\r\n      }\r\n      if (selected) {\r\n        checkPair(item);\r\n      } else {\r\n        setSelected(item.color);\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkPair = (item) => {\r\n    const arrSelected = allBoard.map((square) => {\r\n      if (square.color === selected && selected === item.color) {\r\n        const pairBoard = {\r\n          ...square,\r\n          state: 2,\r\n        };\r\n        return pairBoard;\r\n      } else if (square.state === 1) {\r\n        const wrongBoard = {\r\n          ...square,\r\n          state: 0,\r\n        };\r\n        return wrongBoard;\r\n      } else {\r\n        return square;\r\n      }\r\n    });\r\n    setSelected();\r\n    setTimeout(() => {\r\n      setAllBoard(arrSelected);\r\n    }, 1000);\r\n    checkWin();\r\n  };\r\n\r\n  const checkWin = () => {\r\n    // const win = allBoard.every((v) => v.state === 2);\r\n    const win = allBoard.filter((x) => x.state === 2).length;\r\n    if (win === 10) {\r\n      handleOpen();\r\n    }\r\n  };\r\n\r\n  // Si esta funcion la meto en renderBoar no funciona\r\n  //   const squareRender = (number, id) => {\r\n  //     <div id={id} className=\"squares\">\r\n  //       {number}\r\n  //     </div>;\r\n  //   };\r\n\r\n  const renderBoard = () => {\r\n    return (\r\n      <>\r\n        {allBoard.map((item) => (\r\n          <div\r\n            style={{\r\n              backgroundSize: \"cover\",\r\n              backgroundRepeat: \"no-repeat\",\r\n              backgroundImage: `url(${\r\n                (item.state === 1 || item.state === 2) && item.color\r\n              })`,\r\n            }}\r\n            onClick={() => showColor(item)}\r\n            key={uuniq()}\r\n            className={`squares ${\r\n              (item.state === 1 || item.state === 2) && item.color\r\n            }\r\n            `}\r\n          ></div>\r\n        ))}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"board\" id=\"board\">\r\n      {renderBoard()}\r\n      <Popup\r\n        open={open}\r\n        apiFetch={apiFetch}\r\n        allBoard={allBoard}\r\n        handleClose={handleClose}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n"],"names":["style","position","top","left","transform","width","bgcolor","border","boxShadow","p","props","handleClose","open","allBoard","apiFetch","_jsx","children","Modal","_jsxs","Box","sx","Typography","id","variant","component","mt","Button","onClick","forEach","element","index","state","_useState","useState","_useState2","_slicedToArray","setAllBoard","_useState3","_useState4","selected","setSelected","_useState5","_useState6","setOpen","useEffect","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","random","request","data","dataPics","imageFromServer","wrap","_context","prev","next","min","max","Math","floor","fetch","concat","headers","Authorization","sent","json","photos","item","push","src","tiny","setRandomPosition","stop","apply","arguments","random1","arrayShuffle","random2","board","map","i","uuniq","color","checkPair","arrSelected","square","_objectSpread","setTimeout","checkWin","filter","x","length","className","_Fragment","backgroundSize","backgroundRepeat","backgroundImage","newBoard","showColor","Popup"],"sourceRoot":""}